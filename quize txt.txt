import React, { useState, useEffect } from 'react';
import { ArrowLeft, ArrowRight, RotateCcw } from 'lucide-react';
import { QuizQuestion, QuizResults } from '../types';
import { quizQuestions } from '../data/quizQuestions';

interface QuizPageProps {
  onComplete: (results: QuizResults) => void;
  onBack: () => void;
}

const QuizPage: React.FC<QuizPageProps> = ({ onComplete, onBack }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [showResults, setShowResults] = useState(false);

  const handleAnswer = (questionId: number, optionValue: string) => {
    setAnswers(prev => ({ ...prev, [questionId]: optionValue }));
  };

  const handleNext = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(prev => prev + 1);
    } else {
      calculateResults();
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(prev => prev - 1);
    }
  };

  const calculateResults = () => {
    const scores: QuizResults = {
      trust: 0,
      empathy: 0,
      support: 0,
      equality: 0,
      respect: 0,
      communication: 0,
      independence: 0,
      forgiveness: 0,
      accountability: 0,
      intimacy: 0
    };

    let totalQuestions = 0;

    quizQuestions.forEach(question => {
      const userAnswer = answers[question.id];
      if (userAnswer) {
        const selectedOption = question.options.find(opt => opt.value === userAnswer);
        if (selectedOption) {
          Object.entries(selectedOption.score).forEach(([trait, score]) => {
            if (scores.hasOwnProperty(trait)) {
              scores[trait as keyof QuizResults] += score;
              totalQuestions++;
            }
          });
        }
      }
    });

    // Normalize scores to percentages
    Object.keys(scores).forEach(trait => {
      const key = trait as keyof QuizResults;
      scores[key] = Math.round((scores[key] / (totalQuestions / 10)) * 100);
      // Ensure scores are between 0 and 100
      scores[key] = Math.max(0, Math.min(100, scores[key]));
    });

    onComplete(scores);
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
  };

  const progress = ((currentQuestion + 1) / quizQuestions.length) * 100;
  const currentQ = quizQuestions[currentQuestion];
  const isAnswered = answers[currentQ.id] !== undefined;

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 text-gray-600 hover:text-pink-600 transition-colors duration-200"
        >
          <ArrowLeft className="h-5 w-5" />
          <span>Back to Profile</span>
        </button>

        <button
          onClick={resetQuiz}
          className="flex items-center space-x-2 text-gray-600 hover:text-purple-600 transition-colors duration-200"
        >
          <RotateCcw className="h-5 w-5" />
          <span>Reset Quiz</span>
        </button>
      </div>

      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-pink-500 to-purple-600 bg-clip-text text-transparent">
            MatchBond Assessment
          </h1>
          <span className="text-lg font-semibold text-gray-600">
            {currentQuestion + 1} / {quizQuestions.length}
          </span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <div
            className="bg-gradient-to-r from-pink-500 to-purple-600 h-3 rounded-full transition-all duration-300"
            style={{ width: `${progress}%` }}
          />
        </div>
      </div>

      {/* Question Card */}
      <div className="bg-white rounded-2xl shadow-lg p-8 mb-8">
        <div className="mb-6">
          <span className="inline-block px-3 py-1 bg-gradient-to-r from-pink-100 to-purple-100 text-pink-700 text-sm font-medium rounded-full mb-4">
            {currentQ.category}
          </span>
          <h2 className="text-2xl font-semibold text-gray-800 leading-relaxed">
            {currentQ.question}
          </h2>
        </div>

        <div className="space-y-3">
          {currentQ.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswer(currentQ.id, option.value)}
              className={`w-full text-left p-4 rounded-lg border-2 transition-all duration-200 ${
                answers[currentQ.id] === option.value
                  ? 'border-pink-500 bg-pink-50 text-pink-700'
                  : 'border-gray-200 hover:border-purple-300 hover:bg-purple-50'
              }`}
            >
              <div className="flex items-center space-x-3">
                <div className={`w-4 h-4 rounded-full border-2 ${
                  answers[currentQ.id] === option.value
                    ? 'border-pink-500 bg-pink-500'
                    : 'border-gray-300'
                }`}>
                  {answers[currentQ.id] === option.value && (
                    <div className="w-full h-full bg-white rounded-full scale-50" />
                  )}
                </div>
                <span className="text-lg">{option.label}</span>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Navigation */}
      <div className="flex justify-between items-center">
        <button
          onClick={handlePrevious}
          disabled={currentQuestion === 0}
          className="flex items-center space-x-2 px-6 py-3 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
        >
          <ArrowLeft className="h-5 w-5" />
          <span>Previous</span>
        </button>

        <div className="text-sm text-gray-500">
          {Object.keys(answers).length} of {quizQuestions.length} questions answered
        </div>

        <button
          onClick={handleNext}
          disabled={!isAnswered}
          className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-pink-500 to-purple-600 text-white rounded-lg hover:from-pink-600 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 font-semibold"
        >
          <span>{currentQuestion === quizQuestions.length - 1 ? 'Finish' : 'Next'}</span>
          <ArrowRight className="h-5 w-5" />
        </button>
      </div>
    </div>
  );
};

export default QuizPage;